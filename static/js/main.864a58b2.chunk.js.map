{"version":3,"sources":["components/QuestionBody/renders/Answer/styles.module.scss","components/ProgressBar/styles.module.scss","components/Hexagon/styles.module.scss","components/ProgressBar/renders/styles.module.scss","pages/GameOver/styles.module.scss","components/PageTemplate/styles.module.scss","components/QuestionBody/styles.module.scss","pages/Start/styles.module.scss","components/Button/styles.module.scss","components/QuestionBody/renders/QuestionTitle/styles.module.scss","components/QuestionBody/renders/AnswersGroup/styles.module.scss","pages/Game/styles.module.scss","store/reducers/game/typings/enums.ts","store/reducers/questions/typings/enums.ts","store/reducers/game/gameReducer.ts","store/reducers/game/gameSlice.ts","router/typings/enums.ts","store/reducers/questions/questionsReducer.ts","services/questionsService.ts","store/reducers/questions/questionsThunks.ts","store/reducers/questions/questionExtraReducers.ts","store/reducers/questions/questionsSlice.ts","store/reducers/index.ts","store/index.ts","components/Hexagon/typings/enums.ts","utils/hooks/reduxHooks.ts","components/Button/Button.tsx","components/PageTemplate/PageTemplate.tsx","pages/Start/Start.tsx","utils/findRandomIndex.ts","utils/getGameQuestions.ts","components/QuestionBody/renders/QuestionTitle/QuestionTitle.tsx","components/Hexagon/Hexagon.tsx","components/QuestionBody/renders/Answer/Answer.tsx","utils/sleep.ts","utils/shuffleArray.ts","components/QuestionBody/renders/AnswersGroup/constants.ts","components/QuestionBody/renders/AnswersGroup/AnswersGroup.tsx","components/QuestionBody/QuestionBody.tsx","utils/separateScore.ts","components/ProgressBar/utils/getHexagonVariant.ts","components/ProgressBar/renders/Price.tsx","components/ProgressBar/ProgressBar.tsx","pages/Game/Game.tsx","pages/GameOver/GameOver.tsx","router/index.ts","components/AppRouter/AppRouter.tsx","App.tsx","index.tsx"],"names":["module","exports","GameActions","QuestionsActions","reducers","SET_GAME_STATE","state","action","payload","INCREMENT_PROGRESS","progress","SET_SCORE","score","RESET_GAME","gameSlice","createSlice","name","initialState","gameReducer","reducer","actions","setGameState","incrementGameProgress","setGameScore","resetGame","RouteNames","SET_ACTIVE_QUESTION","activeQuestion","SET_GAME_QUESTIONS","gameQuestions","QuestionsService","axios","get","getAllQuestions","createAsyncThunk","GET_ALL_QUESTIONS","a","questions","getQuestions","data","console","log","e","extraReducers","builder","addCase","pending","allQuestions","fulfilled","questionsSlice","questionsReducer","setActiveQuestion","setGameQuestions","game","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","HexagonVariants","useAppDispatch","useDispatch","useAppSelector","useSelector","Button","onClick","className","styles","button","type","PageTemplate","actionName","actionHandler","children","pageContainer","handImg","pageContent","Start","history","useHistory","dispatch","handleStartClick","useCallback","push","GAME","startPage","startTitle","findRandomIndex","length","Math","floor","random","getGameQuestions","reduce","acc","cur","questionIndex","sort","next","price","QuestionTitle","value","questionTitle","Hexagon","hovered","variant","classNames","hexagon","hover","background","viewBox","fill","xmlns","d","stroke","Answer","letter","answer","selected","correct","wrong","clicked","SELECTED","CORRECT","WRONG","DEFAULT","answerContainer","role","bind","valueLetter","valueText","sleep","ms","Promise","resolve","setTimeout","shuffleArray","arr","round","alphabet","Array","from","map","i","x","String","fromCharCode","AnswersGroup","useState","variants","setVariants","setSelected","setCorrect","setWrong","setClicked","gameProgress","handleVariantClick","id","answers","GAME_OVER","useEffect","answersGroup","QuestionBody","onOpenProgress","questionBody","header","openProgressBtn","question","separateScore","Number","toLocaleString","getHexagonVariant","index","DISABLE","ACTIVE","Price","currentIndex","hexagonVariant","priceContainer","ProgressBar","active","onClose","progressBarContainer","progressActive","closeBtn","progressBar","Game","gameState","setProgressActive","handleOpenProgress","handleCloseProgress","newGameQuestions","gameContainer","GameOver","resultTitle","gameOverPage","gameOverTitle","subtitle","routes","path","START","component","exact","AppRouter","location","pathname","route","to","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.864a58b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerContainer\":\"styles_answerContainer__XzjI0\",\"answer\":\"styles_answer__2Zkrn\",\"value\":\"styles_value__3giYo\",\"valueLetter\":\"styles_valueLetter__NYzx0\",\"valueText\":\"styles_valueText__arjuJ\",\"selected\":\"styles_selected__11fOE\",\"correct\":\"styles_correct__aSzDI\",\"wrong\":\"styles_wrong__2n2Eu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressBarContainer\":\"styles_progressBarContainer__1GbOw\",\"header\":\"styles_header__38jud\",\"closeBtn\":\"styles_closeBtn__WwAbL\",\"progressBar\":\"styles_progressBar__2Drbv\",\"progressActive\":\"styles_progressActive__1kTNN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hexagon\":\"styles_hexagon__3NgT9\",\"background\":\"styles_background__nKYle\",\"selected\":\"styles_selected__2w_6w\",\"correct\":\"styles_correct__1tE2B\",\"wrong\":\"styles_wrong__3MgPT\",\"active\":\"styles_active__3DpID\",\"disable\":\"styles_disable__2EQSL\",\"hover\":\"styles_hover__1WOKP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"priceContainer\":\"styles_priceContainer__3daiL\",\"price\":\"styles_price__xNy5k\",\"value\":\"styles_value__dNi05\",\"active\":\"styles_active__1JUTD\",\"disable\":\"styles_disable__18eLv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameOverPage\":\"styles_gameOverPage__3GDdk\",\"gameOverTitle\":\"styles_gameOverTitle__s8o74\",\"subtitle\":\"styles_subtitle__2Ejxp\",\"score\":\"styles_score__nJdw3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContainer\":\"styles_pageContainer__wCGsT\",\"handImg\":\"styles_handImg__2Y3RX\",\"pageContent\":\"styles_pageContent__353BM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionBody\":\"styles_questionBody__2j1u_\",\"header\":\"styles_header__1w39m\",\"openProgressBtn\":\"styles_openProgressBtn__1SGZi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"startPage\":\"styles_startPage__2FVPX\",\"startTitle\":\"styles_startTitle__WsIyc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__12U2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionTitle\":\"styles_questionTitle__2cSvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answersGroup\":\"styles_answersGroup__1z-p8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameContainer\":\"styles_gameContainer__Q9q7q\"};","enum GameActions {\n  SET_GAME_STATE = 'setGameState',\n  INCREMENT_PROGRESS = 'incrementGameProgress',\n  SET_SCORE = 'setGameScore',\n  RESET_GAME = 'resetGame',\n}\n\nexport default GameActions;\n","enum QuestionsActions {\n  SET_ACTIVE_QUESTION = 'setActiveQuestion',\n  SET_GAME_QUESTIONS = 'setGameQuestions',\n  GET_ALL_QUESTIONS = 'questions/getAllQuestions',\n}\n\nexport default QuestionsActions;\n","import { PayloadAction, SliceCaseReducers } from '@reduxjs/toolkit';\nimport GameActions from './typings/enums';\nimport TGameState, { TSCore, TState } from './typings/types';\n\nconst reducers: SliceCaseReducers<TGameState> = {\n  [GameActions.SET_GAME_STATE]: (state: TGameState, action: PayloadAction<TState>) => ({\n    ...state,\n    state: action.payload.state,\n  }),\n  [GameActions.INCREMENT_PROGRESS]: (state:TGameState) => ({\n    ...state,\n    progress: state.progress + 1,\n  }),\n  [GameActions.SET_SCORE]: (state: TGameState, action: PayloadAction<TSCore>) => ({\n    ...state,\n    score: action.payload.score,\n  }),\n  [GameActions.RESET_GAME]: (state:TGameState) => ({\n    ...state,\n    progress: 0,\n    score: 0,\n  }),\n};\n\nexport default reducers;\n","import { createSlice } from '@reduxjs/toolkit';\nimport reducers from './gameReducer';\nimport TGameState from './typings/types';\n\nconst initialState: TGameState = {\n  state: 0,\n  progress: 0,\n  score: 0,\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers,\n});\n\nconst gameReducer = gameSlice.reducer;\n\nexport const {\n  setGameState, incrementGameProgress, setGameScore, resetGame,\n} = gameSlice.actions;\n\nexport default gameReducer;\n","enum RouteNames {\n  START = '/start',\n  GAME = '/game',\n  GAME_OVER = '/game-over',\n}\n\nexport default RouteNames;\n","import { PayloadAction, SliceCaseReducers } from '@reduxjs/toolkit';\nimport QuestionsActions from './typings/enums';\nimport TQuestionsState, { TActiveQuestion, TGameQuestions } from './typings/types';\n\nconst reducers: SliceCaseReducers<TQuestionsState> = {\n  [QuestionsActions.SET_ACTIVE_QUESTION]:\n      (state: TQuestionsState, action: PayloadAction<TActiveQuestion>) => ({\n        ...state,\n        activeQuestion: action.payload.activeQuestion,\n      }),\n  [QuestionsActions.SET_GAME_QUESTIONS]:\n      (state: TQuestionsState, action: PayloadAction<TGameQuestions>) => ({\n        ...state,\n        gameQuestions: action.payload.gameQuestions,\n      }),\n};\n\nexport default reducers;\n","import axios, { AxiosResponse } from 'axios';\nimport { TGroupQuestions } from '../typings/types/Question';\n\nclass QuestionsService {\n  static async getQuestions():Promise<AxiosResponse<TGroupQuestions[]>> {\n    return axios.get<TGroupQuestions[]>('./questions.json');\n  }\n}\n\nexport default QuestionsService;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { TGroupQuestions } from '../../../typings/types/Question';\nimport QuestionsActions from './typings/enums';\nimport QuestionsService from '../../../services/questionsService';\n\nconst getAllQuestions = createAsyncThunk<TGroupQuestions[]>(\n  QuestionsActions.GET_ALL_QUESTIONS,\n  async (): Promise<TGroupQuestions[]> => {\n    let questions:TGroupQuestions[] = [];\n    try {\n      const { data } = await QuestionsService.getQuestions();\n      questions = data;\n    } catch (e) {\n      console.log({ e });\n    }\n    return questions;\n  },\n);\n\nexport default getAllQuestions;\n","import { ActionReducerMapBuilder } from '@reduxjs/toolkit';\nimport TQuestionsState from './typings/types';\nimport getAllQuestions from './questionsThunks';\n\nconst extraReducers = (builder: ActionReducerMapBuilder<TQuestionsState>) => {\n  builder\n    .addCase(getAllQuestions.pending, (state) => ({\n      ...state,\n      allQuestions: [],\n    }))\n    .addCase(getAllQuestions.fulfilled, (state, action) => ({\n      ...state,\n      allQuestions: action.payload,\n    }));\n};\n\nexport default extraReducers;\n","import { createSlice } from '@reduxjs/toolkit';\nimport reducers from './questionsReducer';\nimport extraReducers from './questionExtraReducers';\nimport { TQuestion } from '../../../typings/types/Question';\nimport TQuestionsState from './typings/types';\n\nconst initialState: TQuestionsState = {\n  activeQuestion: {} as TQuestion,\n  gameQuestions: [],\n  allQuestions: [],\n};\n\nconst questionsSlice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers,\n  extraReducers,\n});\n\nconst questionsReducer = questionsSlice.reducer;\n\nexport const { setActiveQuestion, setGameQuestions } = questionsSlice.actions;\nexport default questionsReducer;\n","import game from './game/gameSlice';\nimport questions from './questions/questionsSlice';\n\nexport default {\n  game,\n  questions,\n};\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst rootReducer = combineReducers(reducers);\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export enum HexagonVariants {\n  SELECTED = 'selected',\n  CORRECT = 'correct',\n  WRONG = 'wrong',\n  ACTIVE = 'active',\n  DISABLE = 'disable',\n  DEFAULT = 'default',\n}\n\nexport default HexagonVariants;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { FC } from 'react';\nimport styles from './styles.module.scss';\n\ninterface IProps {\n  name: string;\n  onClick: (e: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nconst Button: FC<IProps> = ({ name, onClick }) => (\n  <button className={styles.button} type=\"button\" onClick={onClick}>\n    {name}\n  </button>\n);\n\nexport default Button;\n","import React, { FC } from 'react';\nimport styles from './styles.module.scss';\nimport Button from '../Button/Button';\n\ninterface IProps {\n  actionName:string,\n  actionHandler: (e: React.MouseEvent<HTMLButtonElement>) => void\n}\n\nconst PageTemplate:FC<IProps> = ({ actionName, actionHandler, children }) => (\n  <div className={styles.pageContainer}>\n    <div className={styles.handImg} />\n    <div className={styles.pageContent}>\n      {children}\n      <Button name={actionName} onClick={actionHandler} />\n    </div>\n  </div>\n);\n\nexport default PageTemplate;\n","import React, { FC, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport RouteNames from '../../router/typings/enums';\nimport { setGameState } from '../../store/reducers/game/gameSlice';\nimport { useAppDispatch } from '../../utils/hooks/reduxHooks';\nimport styles from './styles.module.scss';\nimport PageTemplate from '../../components/PageTemplate/PageTemplate';\n\nconst Start:FC = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const handleStartClick = useCallback(() => {\n    dispatch(setGameState({ state: 1 }));\n    history.push(RouteNames.GAME);\n  }, []);\n\n  return (\n    <div className={styles.startPage}>\n      <PageTemplate actionName=\"Start\" actionHandler={handleStartClick}>\n        <h1 className={styles.startTitle}>Who wants to be a millionaire?</h1>\n      </PageTemplate>\n    </div>\n  );\n};\n\nexport default Start;\n","const findRandomIndex = (length:number) => Math.floor(Math.random() * length);\n\nexport default findRandomIndex;\n","import { TGroupQuestions, TQuestion } from '../typings/types/Question';\nimport findRandomIndex from './findRandomIndex';\n\nconst getGameQuestions = (questions:TGroupQuestions[]):TQuestion[] => {\n  const selectedQuestions:TQuestion[] = questions.reduce((acc, cur) => {\n    const questionIndex: number = findRandomIndex(cur.questions.length);\n    return [...acc, cur.questions[questionIndex]];\n  }, [] as TQuestion[]);\n\n  return selectedQuestions.sort((cur, next) => (+cur.price) - (+next.price));\n};\n\nexport default getGameQuestions;\n","import React, { FC } from 'react';\nimport styles from './styles.module.scss';\n\ninterface IProps {\n  value: string\n}\n\nconst QuestionTitle:FC<IProps> = ({ value }) => <h2 className={styles.questionTitle}>{value}</h2>;\n\nexport default QuestionTitle;\n","import React, { FC } from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './styles.module.scss';\n\ninterface IProps {\n  hovered: boolean\n  variant: string\n}\n\nconst Hexagon:FC<IProps> = ({ hovered, variant, children }) => (\n  <div className={classNames(\n    styles.hexagon,\n    hovered && styles.hover,\n    styles[variant],\n  )}\n  >\n    <svg className={classNames(styles.background)} viewBox=\"0 0 389 72\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M23.8137 5.09773C25.9857 2.2033 29.3933 0.5 33.012 0.5H355.988C359.607 0.5 363.014 2.2033 365.186 5.09773L388.375 36L365.186 66.9023C363.014 69.7967 359.607 71.5 355.988 71.5H33.012C29.3933 71.5 25.9857 69.7967 23.8137 66.9023L0.625116 36L23.8137 5.09773Z\"\n        fill=\"white\"\n        stroke=\"#D0D0D8\"\n      />\n    </svg>\n    {children}\n  </div>\n);\n\nexport default Hexagon;\n","import React, { FC } from 'react';\nimport classNames from 'classnames/bind';\nimport { TAnswerVariant } from '../../../../typings/types/Question';\nimport styles from './styles.module.scss';\nimport Hexagon from '../../../Hexagon/Hexagon';\nimport { HexagonVariants } from '../../../Hexagon/typings/enums';\n\ninterface IProps {\n  letter:string;\n  answer: TAnswerVariant;\n  onClick: (answer:TAnswerVariant)=>void;\n  selected: boolean;\n  correct:boolean;\n  wrong: boolean;\n  clicked: boolean;\n}\n\nconst Answer:FC<IProps> = ({\n  letter, answer, onClick, selected, correct, wrong, clicked,\n}) => {\n  const variant:string = (selected && HexagonVariants.SELECTED)\n      || (correct && HexagonVariants.CORRECT)\n      || (wrong && HexagonVariants.WRONG)\n      || HexagonVariants.DEFAULT;\n\n  return (\n    <div className={classNames(styles.answerContainer, styles[variant])}>\n      <div\n        className={styles.answer}\n        role=\"presentation\"\n        onClick={onClick.bind(null, answer)}\n      >\n        <Hexagon hovered={!clicked} variant={variant}>\n          <div className={styles.value}>\n            <span className={styles.valueLetter}>{letter}</span>\n            <p className={styles.valueText}>{answer.value}</p>\n          </div>\n        </Hexagon>\n      </div>\n    </div>\n  );\n};\n\nexport default Answer;\n","const sleep = (ms:number): Promise<unknown> => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport default sleep;\n","const shuffleArray = <T>(arr:T[]):T[] => [...arr].sort(() => Math.round(Math.random() * 100) - 50);\n\nexport default shuffleArray;\n","const alpha = Array.from(Array(26)).map((e, i) => i + 65);\nexport const alphabet:string[] = alpha.map((x) => String.fromCharCode(x));\n\nexport default alphabet;\n","import React, {\n  FC, useCallback, useEffect, useState,\n} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../../../utils/hooks/reduxHooks';\nimport Answer from '../Answer/Answer';\nimport { TAnswerVariant } from '../../../../typings/types/Question';\nimport styles from './styles.module.scss';\nimport {\n  incrementGameProgress,\n  setGameScore, setGameState,\n} from '../../../../store/reducers/game/gameSlice';\nimport RouteNames from '../../../../router/typings/enums';\nimport sleep from '../../../../utils/sleep';\nimport shuffleArray from '../../../../utils/shuffleArray';\nimport { alphabet } from './constants';\n\nconst AnswersGroup:FC = () => {\n  const [variants, setVariants] = useState<TAnswerVariant[]>([]);\n  const [selected, setSelected] = useState<string | null>(null);\n  const [correct, setCorrect] = useState<string | null>(null);\n  const [wrong, setWrong] = useState<string | null>(null);\n  const [clicked, setClicked] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const activeQuestion = useAppSelector((state) => state.questions.activeQuestion);\n  const gameProgress = useAppSelector((state) => state.game.progress);\n  const gameQuestions = useAppSelector((state) => state.questions.gameQuestions);\n  const history = useHistory();\n\n  const handleVariantClick = useCallback(async (variant: TAnswerVariant) => {\n    if (selected || correct || wrong) {\n      return;\n    }\n    setClicked(true);\n    setSelected(variant.id);\n    await sleep(1000);\n    setSelected(null);\n    setCorrect(activeQuestion.answers[0]);\n    if (activeQuestion.answers[0] !== variant.id) {\n      setWrong(variant.id);\n    }\n    await sleep(1500);\n    setCorrect(null);\n    setWrong(null);\n    setClicked(false);\n    if (variant.id === activeQuestion.answers[0]) {\n      if (gameProgress === gameQuestions.length - 1) {\n        dispatch(setGameScore({ score: +activeQuestion.price }));\n        dispatch(setGameState({ state: 2 }));\n        history.push(RouteNames.GAME_OVER);\n      }\n      dispatch(incrementGameProgress({}));\n      dispatch(setGameScore({ score: +activeQuestion.price }));\n      return;\n    }\n    dispatch(setGameState({ state: 2 }));\n    history.push(RouteNames.GAME_OVER);\n  }, [activeQuestion, selected, correct, wrong]);\n\n  useEffect(() => {\n    setVariants(() => shuffleArray<TAnswerVariant>(activeQuestion.variants));\n  }, [activeQuestion]);\n\n  return (\n    <div className={styles.answersGroup}>\n      {\n        variants.map((variant, i) => (\n          <Answer\n            key={variant.id}\n            letter={alphabet[i]}\n            answer={variant}\n            clicked={clicked}\n            onClick={handleVariantClick}\n            selected={selected === variant.id}\n            correct={correct === variant.id}\n            wrong={wrong === variant.id}\n          />\n        ))\n      }\n    </div>\n  );\n};\n\nexport default AnswersGroup;\n","import React, { FC } from 'react';\nimport styles from './styles.module.scss';\nimport { useAppSelector } from '../../utils/hooks/reduxHooks';\nimport QuestionTitle from './renders/QuestionTitle/QuestionTitle';\nimport AnswersGroup from './renders/AnswersGroup/AnswersGroup';\n\ninterface IProps {\n  onOpenProgress:()=>void;\n}\n\nconst QuestionBody:FC<IProps> = ({ onOpenProgress }) => {\n  const activeQuestion = useAppSelector((state) => state.questions.activeQuestion);\n  if (!activeQuestion?.id) {\n    return null;\n  }\n\n  return (\n    <div className={styles.questionBody}>\n      <div className={styles.header}>\n        <div className={styles.openProgressBtn} role=\"presentation\" onClick={onOpenProgress} />\n      </div>\n      <QuestionTitle value={activeQuestion.question} />\n      <AnswersGroup />\n    </div>\n  );\n};\n\nexport default QuestionBody;\n","const separateScore = (score: string | number):string => Number(+score).toLocaleString('en-US');\n\nexport default separateScore;\n","import { HexagonVariants } from '../../Hexagon/typings/enums';\n\nconst getHexagonVariant = (progress:number, index:number):string => {\n  if (progress > index) {\n    return HexagonVariants.DISABLE;\n  }\n  if (progress === index) {\n    return HexagonVariants.ACTIVE;\n  }\n  return HexagonVariants.DEFAULT;\n};\n\nexport default getHexagonVariant;\n","import React, { FC } from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './styles.module.scss';\nimport Hexagon from '../../Hexagon/Hexagon';\nimport separateScore from '../../../utils/separateScore';\nimport getHexagonVariant from '../utils/getHexagonVariant';\nimport { useAppSelector } from '../../../utils/hooks/reduxHooks';\n\ninterface IProps {\n  price:string | number;\n  currentIndex:number;\n}\n\nconst Price:FC<IProps> = ({ price, currentIndex }) => {\n  const gameProgress = useAppSelector((state) => state.game.progress);\n  const hexagonVariant = getHexagonVariant(gameProgress, currentIndex);\n  return (\n    <div className={classNames(styles.priceContainer, styles[hexagonVariant])}>\n      <div className={styles.price}>\n        <Hexagon hovered={false} variant={hexagonVariant}>\n          <div className={styles.value}>\n            {`$${separateScore(price)}`}\n          </div>\n        </Hexagon>\n      </div>\n    </div>\n  );\n};\n\nexport default Price;\n","import React, { FC } from 'react';\nimport classNames from 'classnames/bind';\nimport { useAppSelector } from '../../utils/hooks/reduxHooks';\nimport styles from './styles.module.scss';\nimport Price from './renders/Price';\n\ninterface IProps {\n  active:boolean;\n  onClose:()=>void\n}\n\nconst ProgressBar:FC<IProps> = ({ active, onClose }) => {\n  const gameQuestions = useAppSelector((state) => state.questions.gameQuestions);\n\n  return (\n    <div className={classNames(styles.progressBarContainer, active && styles.progressActive)}>\n      <div className={styles.header}>\n        <div className={styles.closeBtn} role=\"presentation\" onClick={onClose} />\n      </div>\n      <div className={styles.progressBar}>\n        {\n          gameQuestions.map((question, i) => (\n            <Price\n              key={question.id}\n              price={question.price}\n              currentIndex={i}\n            />\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, {\n  FC, useCallback, useEffect, useState,\n} from 'react';\nimport { useAppDispatch, useAppSelector } from '../../utils/hooks/reduxHooks';\nimport getGameQuestions from '../../utils/getGameQuestions';\nimport { setActiveQuestion, setGameQuestions } from '../../store/reducers/questions/questionsSlice';\nimport QuestionBody from '../../components/QuestionBody/QuestionBody';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport styles from './styles.module.scss';\n\nconst Game: FC = () => {\n  const questions = useAppSelector((state) => state.questions.allQuestions);\n  const gameQuestions = useAppSelector((state) => state.questions.gameQuestions);\n  const gameState = useAppSelector((state) => state.game.state);\n  const gameProgress = useAppSelector((state) => state.game.progress);\n  const dispatch = useAppDispatch();\n\n  const [progressActive, setProgressActive] = useState<boolean>(false);\n\n  const handleOpenProgress = useCallback(() => setProgressActive(true), []);\n  const handleCloseProgress = useCallback(() => setProgressActive(false), []);\n\n  useEffect(() => {\n    if (gameState !== 1) {\n      return;\n    }\n    const newGameQuestions = getGameQuestions(questions);\n    if (newGameQuestions.length > 0) {\n      dispatch(setGameQuestions({ gameQuestions: newGameQuestions }));\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    dispatch(setActiveQuestion({ activeQuestion: gameQuestions[gameProgress] }));\n  }, [gameProgress, gameQuestions]);\n\n  return (\n    <div className={styles.gameContainer}>\n      <QuestionBody onOpenProgress={handleOpenProgress} />\n      <ProgressBar active={progressActive} onClose={handleCloseProgress} />\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { FC, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PageTemplate from '../../components/PageTemplate/PageTemplate';\nimport { useAppDispatch, useAppSelector } from '../../utils/hooks/reduxHooks';\nimport { resetGame, setGameState } from '../../store/reducers/game/gameSlice';\nimport RouteNames from '../../router/typings/enums';\nimport styles from './styles.module.scss';\nimport separateScore from '../../utils/separateScore';\n\nconst GameOver:FC = () => {\n  const score = useAppSelector((state) => state.game.score);\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const handleStartClick = useCallback(() => {\n    dispatch(setGameState({ state: 1 }));\n    dispatch(resetGame({}));\n    history.push(RouteNames.GAME);\n  }, []);\n\n  const resultTitle = `$${separateScore(score)} earned`;\n\n  return (\n    <div className={styles.gameOverPage}>\n      <PageTemplate actionName=\"Try again\" actionHandler={handleStartClick}>\n        <div className={styles.gameOverTitle}>\n          <span className={styles.subtitle}>Total score:</span>\n          <h2 className={styles.score}>\n            {resultTitle}\n          </h2>\n        </div>\n      </PageTemplate>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import IRoute from './typings/interfaces';\nimport RouteNames from './typings/enums';\nimport Start from '../pages/Start/Start';\nimport Game from '../pages/Game/Game';\nimport GameOver from '../pages/GameOver/GameOver';\n\nconst routes: IRoute[] = [\n  { path: RouteNames.START, component: Start, exact: true },\n  { path: RouteNames.GAME, component: Game, exact: true },\n  { path: RouteNames.GAME_OVER, component: GameOver, exact: true },\n];\n\nexport default routes;\n","import React, { FC, useEffect } from 'react';\nimport {\n  Switch, Route, Redirect, useHistory,\n} from 'react-router-dom';\nimport routes from '../../router';\nimport RouteNames from '../../router/typings/enums';\n\nconst AppRouter:FC = () => {\n  const history = useHistory();\n  useEffect(() => {\n    if (history.location.pathname !== RouteNames.START) {\n      history.push(RouteNames.START);\n    }\n  }, []);\n\n  return (\n    <Switch>\n      {routes.map((route) => (\n        <Route\n          path={route.path}\n          exact={route.exact}\n          component={route.component}\n          key={route.path}\n        />\n      ))}\n      <Redirect to={RouteNames.START} />\n    </Switch>\n  );\n};\n\nexport default AppRouter;\n","import React, { FC, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport getAllQuestions from './store/reducers/questions/questionsThunks';\nimport AppRouter from './components/AppRouter/AppRouter';\nimport './App.scss';\n\nconst App:FC = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllQuestions());\n  }, []);\n\n  return (\n    <HashRouter>\n      <AppRouter />\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}